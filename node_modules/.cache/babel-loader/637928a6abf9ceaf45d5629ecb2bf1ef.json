{"ast":null,"code":"var _jsxFileName = \"/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport SectionHeader from \"./components/SectionHeader\";\nimport Popup from \"./components/Popup\";\nimport AddCourse from \"./components/AddCourse\";\nimport Courses from \"./components/Courses\";\nimport Tasks from \"./components/Tasks\";\nimport LoginForm from \"./components/LoginForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Obtaining the backend url\n  const BACKEND_URL = process.env.NODE_ENV === \"development\" && process.env.REACT_APP_ENV !== \"production\" ? \"http://localhost:8080\" : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\"; // State\n\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState(\"\");\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showAddCourse, setShowAddCourse] = useState(false);\n  const [tasks, setTasks] = useState([\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      name: string,\r\n      course: string,\r\n      dueDateTime: string,\r\n      reminder: boolean,\r\n      ownerUser: string,\r\n      status?: string,\r\n    }\r\n    Note 1: dueDateTime should be formatted like \"2021-11-01T19:06\"\r\n    Note 3: status should be \"COMPLETED\" or \"INCOMPLETE\"\r\n    */\n  ]);\n  const [courses, setCourses] = useState([\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      code: string,\r\n      name: string,\r\n      term: string,\r\n    }\r\n    */\n  ]);\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\n  // Login info\n\n  const login = async details => {\n    const username = details.username;\n    const password = details.password;\n    let user = await fetch(`${BACKEND_URL}/user/login/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    user = await user.json();\n\n    if (details.username === user.username && details.password === user.password) {\n      // alert(\"Logged in\");\n      setUser({\n        username: details.username,\n        password: details.password\n      });\n    } else {\n      alert(\"Username or password is incorrect.\");\n    }\n  };\n\n  const Logout = () => setUser({\n    username: \"\",\n    password: \"\"\n  }); // Get task and course list\n\n\n  useEffect(() => {\n    if (user.username !== \"\") {\n      const getTasks = async () => {\n        let tasksFromServer = await fetch(`${BACKEND_URL}/tasks/${user.username}`);\n        tasksFromServer = await tasksFromServer.json();\n        tasksFromServer = tasksFromServer.map(task => ({ ...task,\n          day: task.dueDateTime,\n          id: task._id\n        }));\n        setTasks(tasksFromServer);\n      };\n\n      getTasks();\n\n      const getCourses = async () => {\n        let coursesFromServer = await fetch(`${BACKEND_URL}/courses`);\n        coursesFromServer = await coursesFromServer.json();\n        setCourses(coursesFromServer);\n      };\n\n      getCourses();\n    } else {\n      setTasks([]);\n      setCourses([]);\n    }\n  }, [BACKEND_URL, user.username]); // Add Task\n\n  const addTask = async task => {\n    setShowAddTask(false);\n    task.ownerUser = user.username; //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n\n    const res = await fetch(`${BACKEND_URL}/task/new`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around task because the\n      //json formatted expected by the backend is literally\n      //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\n      body: JSON.stringify({\n        task\n      })\n    });\n    const json = await res.json(); //Returned data\n    //With our id'd course, put it into the list.\n\n    setTasks([...tasks, json]); //const newTask = { id, ...task };\n  }; // Edit Task\n\n\n  const editTask = async (newName, newCourse, newDueDateTime) => {\n    newName = newName.trim();\n\n    if (newName === \"\") {\n      alert(\"Please give a non-empty name\");\n      return false;\n    } else {\n      await fetch(`${BACKEND_URL}/task/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        //We add additional {} around task because the\n        //json formatted expected by the backend is literally\n        //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\n        body: JSON.stringify({\n          task: {\n            _id: taskToEdit,\n            name: newName,\n            course: newCourse === \"\" ? \" \" : newCourse,\n            // if you set the value to \"\" it won't change\n            dueDateTime: newDueDateTime === \"\" ? \" \" : newDueDateTime\n          }\n        })\n      });\n      setTasks(tasks.map(task => task._id === taskToEdit ? { ...task,\n        name: newName,\n        course: newCourse,\n        dueDateTime: newDueDateTime\n      } : task));\n      return true;\n    }\n  };\n\n  const editTaskStatus = async (taskToEdit, newStatus) => {\n    await fetch(`${BACKEND_URL}/task/update`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        task: {\n          _id: taskToEdit,\n          status: newStatus\n        }\n      })\n    });\n    setTasks(tasks.map(task => task._id === taskToEdit ? { ...task,\n      status: newStatus\n    } : task));\n  }; // Delete Task\n\n\n  const deleteTask = async _id => {\n    await fetch(`${BACKEND_URL}/task/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        task: {\n          _id\n        }\n      })\n    });\n    setTasks(tasks.filter(task => task._id !== _id));\n    setTaskToEdit(-1); // alert(\"the task is deleted\");\n  };\n\n  const addCourse = async course => {\n    //Ensure we're not adding a redundant course.\n    for (const existingCourse of courses) {\n      if (course.code === existingCourse.code) {\n        alert(\"This course code already exists\");\n        return false;\n      }\n    } //Put away the add course window.\n\n\n    setShowAddCourse(false); //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n\n    const res = await fetch(`${BACKEND_URL}/course/new`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        course\n      })\n    });\n    const json = await res.json(); //Returned data\n    //With our id'd course, put it into the list.\n\n    setCourses([...courses, json]);\n    return true;\n  }; // Delete Course\n\n\n  const deleteCourse = async (_id, code) => {\n    const res = await fetch(`${BACKEND_URL}/course/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        course: {\n          _id\n        }\n      })\n    });\n    const json = await res.json(); //Returned data\n\n    if (json.n === 1) {\n      setCourses(courses.filter(course => course._id !== _id));\n\n      for (const task of tasks) {\n        if (task.course === code) {\n          await deleteTask(task._id);\n        }\n      }\n\n      setTasks(tasks.filter(task => task.course !== code));\n      setTaskToEdit(-1); // alert(\"the course and its related tasks are deleted\");\n    } else {\n      alert(\"Something weird happened when deleting a course\");\n    }\n  }; // Added login form\n\n\n  return user.username === \"\" ? /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(LoginForm, {\n      login: login,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      username: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"task-section\",\n        children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n          id: \"task-section-header\",\n          listOfWhat: \"Tasks\",\n          onAdd: () => setShowAddTask(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), showAddTask && /*#__PURE__*/_jsxDEV(Popup, {\n          content: /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask,\n            courses: courses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 24\n          }, this),\n          handleClose: () => setShowAddTask(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n          tasks: tasks,\n          taskToEdit: taskToEdit,\n          setTaskToEdit: setTaskToEdit,\n          onEdit: editTask,\n          onEditStatus: editTaskStatus,\n          onDelete: deleteTask,\n          courses: courses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this) : \"No tasks to show\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"course-section\",\n        children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n          id: \"course-section-header\",\n          listOfWhat: \"Courses\",\n          onAdd: () => setShowAddCourse(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), showAddCourse && /*#__PURE__*/_jsxDEV(Popup, {\n          content: /*#__PURE__*/_jsxDEV(AddCourse, {\n            onAdd: addCourse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 24\n          }, this),\n          handleClose: () => setShowAddCourse(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), courses.length > 0 ? /*#__PURE__*/_jsxDEV(Courses, {\n          courses: courses,\n          onDelete: deleteCourse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this) : \"No courses to show\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: Logout,\n          id: \"logout\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"RhfB8avVzBa9JWCeGWVq4+k9r7I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js"],"names":["Header","useState","useEffect","AddTask","SectionHeader","Popup","AddCourse","Courses","Tasks","LoginForm","App","BACKEND_URL","process","env","NODE_ENV","REACT_APP_ENV","user","setUser","username","password","error","setError","showAddTask","setShowAddTask","showAddCourse","setShowAddCourse","tasks","setTasks","courses","setCourses","taskToEdit","setTaskToEdit","login","details","fetch","method","headers","body","JSON","stringify","json","alert","Logout","getTasks","tasksFromServer","map","task","day","dueDateTime","id","_id","getCourses","coursesFromServer","addTask","ownerUser","res","editTask","newName","newCourse","newDueDateTime","trim","name","course","editTaskStatus","newStatus","status","deleteTask","filter","addCourse","existingCourse","code","deleteCourse","n","length","display","justifyContent"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAMC,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IACAF,OAAO,CAACC,GAAR,CAAYE,aAAZ,KAA8B,YAD9B,GAEI,uBAFJ,GAGI,sDAJN,CAFgB,CAQhB;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC;AAAEiB,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CAAhC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAM,CAACyB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC;AACjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbqC,GAAD,CAAlC;AAeA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC;AACrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AARyC,GAAD,CAAtC;AAWA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,CAAC,CAAF,CAA5C,CAzCgB,CAyCkC;AAElD;;AACA,QAAM+B,KAAK,GAAG,MAAOC,OAAP,IAAmB;AAC/B,UAAMf,QAAQ,GAAGe,OAAO,CAACf,QAAzB;AACA,UAAMC,QAAQ,GAAGc,OAAO,CAACd,QAAzB;AACA,QAAIH,IAAI,GAAG,MAAMkB,KAAK,CAAE,GAAEvB,WAAY,cAAhB,EAA+B;AACnDwB,MAAAA,MAAM,EAAE,MAD2C;AAEnDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0C;AAKnDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBrB,QAAAA,QADmB;AAEnBC,QAAAA;AAFmB,OAAf;AAL6C,KAA/B,CAAtB;AAUAH,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACwB,IAAL,EAAb;;AACA,QACEP,OAAO,CAACf,QAAR,KAAqBF,IAAI,CAACE,QAA1B,IACAe,OAAO,CAACd,QAAR,KAAqBH,IAAI,CAACG,QAF5B,EAGE;AACA;AACAF,MAAAA,OAAO,CAAC;AACNC,QAAAA,QAAQ,EAAEe,OAAO,CAACf,QADZ;AAENC,QAAAA,QAAQ,EAAEc,OAAO,CAACd;AAFZ,OAAD,CAAP;AAID,KATD,MASO;AACLsB,MAAAA,KAAK,CAAC,oCAAD,CAAL;AACD;AACF,GA1BD;;AA4BA,QAAMC,MAAM,GAAG,MAAMzB,OAAO,CAAC;AAAEC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CAA5B,CAxEgB,CA0EhB;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAI,CAACE,QAAL,KAAkB,EAAtB,EAA0B;AACxB,YAAMyB,QAAQ,GAAG,YAAY;AAC3B,YAAIC,eAAe,GAAG,MAAMV,KAAK,CAC9B,GAAEvB,WAAY,UAASK,IAAI,CAACE,QAAS,EADP,CAAjC;AAGA0B,QAAAA,eAAe,GAAG,MAAMA,eAAe,CAACJ,IAAhB,EAAxB;AACAI,QAAAA,eAAe,GAAGA,eAAe,CAACC,GAAhB,CAAqBC,IAAD,KAAW,EAC/C,GAAGA,IAD4C;AAE/CC,UAAAA,GAAG,EAAED,IAAI,CAACE,WAFqC;AAG/CC,UAAAA,EAAE,EAAEH,IAAI,CAACI;AAHsC,SAAX,CAApB,CAAlB;AAKAvB,QAAAA,QAAQ,CAACiB,eAAD,CAAR;AACD,OAXD;;AAaAD,MAAAA,QAAQ;;AAER,YAAMQ,UAAU,GAAG,YAAY;AAC7B,YAAIC,iBAAiB,GAAG,MAAMlB,KAAK,CAAE,GAAEvB,WAAY,UAAhB,CAAnC;AACAyC,QAAAA,iBAAiB,GAAG,MAAMA,iBAAiB,CAACZ,IAAlB,EAA1B;AACAX,QAAAA,UAAU,CAACuB,iBAAD,CAAV;AACD,OAJD;;AAMAD,MAAAA,UAAU;AACX,KAvBD,MAuBO;AACLxB,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GA5BQ,EA4BN,CAAClB,WAAD,EAAcK,IAAI,CAACE,QAAnB,CA5BM,CAAT,CA3EgB,CAyGhB;;AACA,QAAMmC,OAAO,GAAG,MAAOP,IAAP,IAAgB;AAC9BvB,IAAAA,cAAc,CAAC,KAAD,CAAd;AAEAuB,IAAAA,IAAI,CAACQ,SAAL,GAAiBtC,IAAI,CAACE,QAAtB,CAH8B,CAI9B;AACA;AACA;;AACA,UAAMqC,GAAG,GAAG,MAAMrB,KAAK,CAAE,GAAEvB,WAAY,WAAhB,EAA4B;AACjDwB,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwC;AAKjD;AACA;AACA;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEO,QAAAA;AAAF,OAAf;AAR2C,KAA5B,CAAvB;AAUA,UAAMN,IAAI,GAAG,MAAMe,GAAG,CAACf,IAAJ,EAAnB,CAjB8B,CAiBC;AAE/B;;AACAb,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWc,IAAX,CAAD,CAAR,CApB8B,CAsB9B;AACD,GAvBD,CA1GgB,CAmIhB;;;AACA,QAAMgB,QAAQ,GAAG,OAAOC,OAAP,EAAgBC,SAAhB,EAA2BC,cAA3B,KAA8C;AAC7DF,IAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,EAAV;;AACA,QAAIH,OAAO,KAAK,EAAhB,EAAoB;AAClBhB,MAAAA,KAAK,CAAC,8BAAD,CAAL;AAEA,aAAO,KAAP;AACD,KAJD,MAIO;AACL,YAAMP,KAAK,CAAE,GAAEvB,WAAY,cAAhB,EAA+B;AACxCwB,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF+B;AAKxC;AACA;AACA;AACAC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBO,UAAAA,IAAI,EAAE;AACJI,YAAAA,GAAG,EAAEpB,UADD;AAEJ+B,YAAAA,IAAI,EAAEJ,OAFF;AAGJK,YAAAA,MAAM,EAAEJ,SAAS,KAAK,EAAd,GAAmB,GAAnB,GAAyBA,SAH7B;AAGwC;AAC5CV,YAAAA,WAAW,EAAEW,cAAc,KAAK,EAAnB,GAAwB,GAAxB,GAA8BA;AAJvC;AADa,SAAf;AARkC,OAA/B,CAAX;AAiBAhC,MAAAA,QAAQ,CACND,KAAK,CAACmB,GAAN,CAAWC,IAAD,IACRA,IAAI,CAACI,GAAL,KAAapB,UAAb,GACI,EACE,GAAGgB,IADL;AAEEe,QAAAA,IAAI,EAAEJ,OAFR;AAGEK,QAAAA,MAAM,EAAEJ,SAHV;AAIEV,QAAAA,WAAW,EAAEW;AAJf,OADJ,GAOIb,IARN,CADM,CAAR;AAaA,aAAO,IAAP;AACD;AACF,GAvCD;;AAyCA,QAAMiB,cAAc,GAAG,OAAOjC,UAAP,EAAmBkC,SAAnB,KAAiC;AACtD,UAAM9B,KAAK,CAAE,GAAEvB,WAAY,cAAhB,EAA+B;AACxCwB,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+B;AAKxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBO,QAAAA,IAAI,EAAE;AACJI,UAAAA,GAAG,EAAEpB,UADD;AAEJmC,UAAAA,MAAM,EAAED;AAFJ;AADa,OAAf;AALkC,KAA/B,CAAX;AAaArC,IAAAA,QAAQ,CACND,KAAK,CAACmB,GAAN,CAAWC,IAAD,IACRA,IAAI,CAACI,GAAL,KAAapB,UAAb,GAA0B,EAAE,GAAGgB,IAAL;AAAWmB,MAAAA,MAAM,EAAED;AAAnB,KAA1B,GAA2DlB,IAD7D,CADM,CAAR;AAKD,GAnBD,CA7KgB,CAkMhB;;;AACA,QAAMoB,UAAU,GAAG,MAAOhB,GAAP,IAAe;AAChC,UAAMhB,KAAK,CAAE,GAAEvB,WAAY,cAAhB,EAA+B;AACxCwB,MAAAA,MAAM,EAAE,QADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+B;AAKxC;AACA;AACA;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEO,QAAAA,IAAI,EAAE;AAAEI,UAAAA;AAAF;AAAR,OAAf;AARkC,KAA/B,CAAX;AAWAvB,IAAAA,QAAQ,CAACD,KAAK,CAACyC,MAAN,CAAcrB,IAAD,IAAUA,IAAI,CAACI,GAAL,KAAaA,GAApC,CAAD,CAAR;AACAnB,IAAAA,aAAa,CAAC,CAAC,CAAF,CAAb,CAbgC,CAchC;AACD,GAfD;;AAiBA,QAAMqC,SAAS,GAAG,MAAON,MAAP,IAAkB;AAClC;AACA,SAAK,MAAMO,cAAX,IAA6BzC,OAA7B,EAAsC;AACpC,UAAIkC,MAAM,CAACQ,IAAP,KAAgBD,cAAc,CAACC,IAAnC,EAAyC;AACvC7B,QAAAA,KAAK,CAAC,iCAAD,CAAL;AAEA,eAAO,KAAP;AACD;AACF,KARiC,CAUlC;;;AACAhB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB,CAXkC,CAalC;AACA;AACA;;AACA,UAAM8B,GAAG,GAAG,MAAMrB,KAAK,CAAE,GAAEvB,WAAY,aAAhB,EAA8B;AACnDwB,MAAAA,MAAM,EAAE,MAD2C;AAEnDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0C;AAKnD;AACA;AACA;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEuB,QAAAA;AAAF,OAAf;AAR6C,KAA9B,CAAvB;AAUA,UAAMtB,IAAI,GAAG,MAAMe,GAAG,CAACf,IAAJ,EAAnB,CA1BkC,CA0BH;AAC/B;;AACAX,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaY,IAAb,CAAD,CAAV;AAEA,WAAO,IAAP;AACD,GA/BD,CApNgB,CAqPhB;;;AACA,QAAM+B,YAAY,GAAG,OAAOrB,GAAP,EAAYoB,IAAZ,KAAqB;AACxC,UAAMf,GAAG,GAAG,MAAMrB,KAAK,CAAE,GAAEvB,WAAY,gBAAhB,EAAiC;AACtDwB,MAAAA,MAAM,EAAE,QAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF6C;AAKtDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEuB,QAAAA,MAAM,EAAE;AAAEZ,UAAAA;AAAF;AAAV,OAAf;AALgD,KAAjC,CAAvB;AAQA,UAAMV,IAAI,GAAG,MAAMe,GAAG,CAACf,IAAJ,EAAnB,CATwC,CAST;;AAE/B,QAAIA,IAAI,CAACgC,CAAL,KAAW,CAAf,EAAkB;AAChB3C,MAAAA,UAAU,CAACD,OAAO,CAACuC,MAAR,CAAgBL,MAAD,IAAYA,MAAM,CAACZ,GAAP,KAAeA,GAA1C,CAAD,CAAV;;AACA,WAAK,MAAMJ,IAAX,IAAmBpB,KAAnB,EAA0B;AACxB,YAAIoB,IAAI,CAACgB,MAAL,KAAgBQ,IAApB,EAA0B;AACxB,gBAAMJ,UAAU,CAACpB,IAAI,CAACI,GAAN,CAAhB;AACD;AACF;;AACDvB,MAAAA,QAAQ,CAACD,KAAK,CAACyC,MAAN,CAAcrB,IAAD,IAAUA,IAAI,CAACgB,MAAL,KAAgBQ,IAAvC,CAAD,CAAR;AACAvC,MAAAA,aAAa,CAAC,CAAC,CAAF,CAAb,CARgB,CAShB;AACD,KAVD,MAUO;AACLU,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACD;AACF,GAxBD,CAtPgB,CA+QhB;;;AACA,SAAOzB,IAAI,CAACE,QAAL,KAAkB,EAAlB,gBACL;AAAM,IAAA,SAAS,EAAC,KAAhB;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEc,KAAlB;AAAyB,MAAA,KAAK,EAAEZ;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK,gBAKL;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEJ,IAAI,CAACE;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAS,QAAA,EAAE,EAAC,cAAZ;AAAA,gCACE,QAAC,aAAD;AACE,UAAA,EAAE,EAAC,qBADL;AAEE,UAAA,UAAU,EAAC,OAFb;AAGE,UAAA,KAAK,EAAE,MAAMK,cAAc,CAAC,IAAD;AAH7B;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGD,WAAW,iBACV,QAAC,KAAD;AACE,UAAA,OAAO,eAAE,QAAC,OAAD;AAAS,YAAA,KAAK,EAAE+B,OAAhB;AAAyB,YAAA,OAAO,EAAEzB;AAAlC;AAAA;AAAA;AAAA;AAAA,kBADX;AAEE,UAAA,WAAW,EAAE,MAAML,cAAc,CAAC,KAAD;AAFnC;AAAA;AAAA;AAAA;AAAA,gBAPJ,EAYGG,KAAK,CAAC+C,MAAN,GAAe,CAAf,gBACC,QAAC,KAAD;AACE,UAAA,KAAK,EAAE/C,KADT;AAEE,UAAA,UAAU,EAAEI,UAFd;AAGE,UAAA,aAAa,EAAEC,aAHjB;AAIE,UAAA,MAAM,EAAEyB,QAJV;AAKE,UAAA,YAAY,EAAEO,cALhB;AAME,UAAA,QAAQ,EAAEG,UANZ;AAOE,UAAA,OAAO,EAAEtC;AAPX;AAAA;AAAA;AAAA;AAAA,gBADD,GAWC,kBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA2BE;AAAS,QAAA,EAAE,EAAC,gBAAZ;AAAA,gCACE,QAAC,aAAD;AACE,UAAA,EAAE,EAAC,uBADL;AAEE,UAAA,UAAU,EAAC,SAFb;AAGE,UAAA,KAAK,EAAE,MAAMH,gBAAgB,CAAC,IAAD;AAH/B;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGD,aAAa,iBACZ,QAAC,KAAD;AACE,UAAA,OAAO,eAAE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAE4C;AAAlB;AAAA;AAAA;AAAA;AAAA,kBADX;AAEE,UAAA,WAAW,EAAE,MAAM3C,gBAAgB,CAAC,KAAD;AAFrC;AAAA;AAAA;AAAA;AAAA,gBAPJ,EAYGG,OAAO,CAAC6C,MAAR,GAAiB,CAAjB,gBACC,QAAC,OAAD;AAAS,UAAA,OAAO,EAAE7C,OAAlB;AAA2B,UAAA,QAAQ,EAAE2C;AAArC;AAAA;AAAA;AAAA;AAAA,gBADD,GAGC,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF,eA6CE;AAAS,QAAA,KAAK,EAAE;AAAEG,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,cAAc,EAAE;AAAnC,SAAhB;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEjC,MAAjB;AAAyB,UAAA,EAAE,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7CF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAqDE;AAAA;AAAA;AAAA;AAAA,YArDF;AAAA,kBALF;AA6DD,CA7UD;;GAAMhC,G;;KAAAA,G;AA+UN,eAAeA,GAAf","sourcesContent":["import Header from \"./components/Header\";\r\nimport { useState, useEffect } from \"react\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport SectionHeader from \"./components/SectionHeader\";\r\nimport Popup from \"./components/Popup\";\r\nimport AddCourse from \"./components/AddCourse\";\r\nimport Courses from \"./components/Courses\";\r\nimport Tasks from \"./components/Tasks\";\r\nimport LoginForm from \"./components/LoginForm\";\r\n\r\nconst App = () => {\r\n  // Obtaining the backend url\r\n  const BACKEND_URL =\r\n    process.env.NODE_ENV === \"development\" &&\r\n    process.env.REACT_APP_ENV !== \"production\"\r\n      ? \"http://localhost:8080\"\r\n      : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\";\r\n\r\n  // State\r\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [showAddCourse, setShowAddCourse] = useState(false);\r\n\r\n  const [tasks, setTasks] = useState([\r\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      name: string,\r\n      course: string,\r\n      dueDateTime: string,\r\n      reminder: boolean,\r\n      ownerUser: string,\r\n      status?: string,\r\n    }\r\n    Note 1: dueDateTime should be formatted like \"2021-11-01T19:06\"\r\n    Note 3: status should be \"COMPLETED\" or \"INCOMPLETE\"\r\n    */\r\n  ]);\r\n  const [courses, setCourses] = useState([\r\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      code: string,\r\n      name: string,\r\n      term: string,\r\n    }\r\n    */\r\n  ]);\r\n\r\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\r\n\r\n  // Login info\r\n  const login = async (details) => {\r\n    const username = details.username;\r\n    const password = details.password;\r\n    let user = await fetch(`${BACKEND_URL}/user/login/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username,\r\n        password,\r\n      }),\r\n    });\r\n    user = await user.json();\r\n    if (\r\n      details.username === user.username &&\r\n      details.password === user.password\r\n    ) {\r\n      // alert(\"Logged in\");\r\n      setUser({\r\n        username: details.username,\r\n        password: details.password,\r\n      });\r\n    } else {\r\n      alert(\"Username or password is incorrect.\");\r\n    }\r\n  };\r\n\r\n  const Logout = () => setUser({ username: \"\", password: \"\" });\r\n\r\n  // Get task and course list\r\n  useEffect(() => {\r\n    if (user.username !== \"\") {\r\n      const getTasks = async () => {\r\n        let tasksFromServer = await fetch(\r\n          `${BACKEND_URL}/tasks/${user.username}`\r\n        );\r\n        tasksFromServer = await tasksFromServer.json();\r\n        tasksFromServer = tasksFromServer.map((task) => ({\r\n          ...task,\r\n          day: task.dueDateTime,\r\n          id: task._id,\r\n        }));\r\n        setTasks(tasksFromServer);\r\n      };\r\n\r\n      getTasks();\r\n\r\n      const getCourses = async () => {\r\n        let coursesFromServer = await fetch(`${BACKEND_URL}/courses`);\r\n        coursesFromServer = await coursesFromServer.json();\r\n        setCourses(coursesFromServer);\r\n      };\r\n\r\n      getCourses();\r\n    } else {\r\n      setTasks([]);\r\n      setCourses([]);\r\n    }\r\n  }, [BACKEND_URL, user.username]);\r\n\r\n  // Add Task\r\n  const addTask = async (task) => {\r\n    setShowAddTask(false);\r\n\r\n    task.ownerUser = user.username;\r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(`${BACKEND_URL}/task/new`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around task because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\r\n      body: JSON.stringify({ task }),\r\n    });\r\n    const json = await res.json(); //Returned data\r\n\r\n    //With our id'd course, put it into the list.\r\n    setTasks([...tasks, json]);\r\n\r\n    //const newTask = { id, ...task };\r\n  };\r\n\r\n  // Edit Task\r\n  const editTask = async (newName, newCourse, newDueDateTime) => {\r\n    newName = newName.trim();\r\n    if (newName === \"\") {\r\n      alert(\"Please give a non-empty name\");\r\n\r\n      return false;\r\n    } else {\r\n      await fetch(`${BACKEND_URL}/task/update`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        //We add additional {} around task because the\r\n        //json formatted expected by the backend is literally\r\n        //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\r\n        body: JSON.stringify({\r\n          task: {\r\n            _id: taskToEdit,\r\n            name: newName,\r\n            course: newCourse === \"\" ? \" \" : newCourse, // if you set the value to \"\" it won't change\r\n            dueDateTime: newDueDateTime === \"\" ? \" \" : newDueDateTime,\r\n          },\r\n        }),\r\n      });\r\n      setTasks(\r\n        tasks.map((task) =>\r\n          task._id === taskToEdit\r\n            ? {\r\n                ...task,\r\n                name: newName,\r\n                course: newCourse,\r\n                dueDateTime: newDueDateTime,\r\n              }\r\n            : task\r\n        )\r\n      );\r\n\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const editTaskStatus = async (taskToEdit, newStatus) => {\r\n    await fetch(`${BACKEND_URL}/task/update`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        task: {\r\n          _id: taskToEdit,\r\n          status: newStatus,\r\n        },\r\n      }),\r\n    });\r\n\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task._id === taskToEdit ? { ...task, status: newStatus } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  // Delete Task\r\n  const deleteTask = async (_id) => {\r\n    await fetch(`${BACKEND_URL}/task/delete`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ task: { _id } }),\r\n    });\r\n\r\n    setTasks(tasks.filter((task) => task._id !== _id));\r\n    setTaskToEdit(-1);\r\n    // alert(\"the task is deleted\");\r\n  };\r\n\r\n  const addCourse = async (course) => {\r\n    //Ensure we're not adding a redundant course.\r\n    for (const existingCourse of courses) {\r\n      if (course.code === existingCourse.code) {\r\n        alert(\"This course code already exists\");\r\n\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //Put away the add course window.\r\n    setShowAddCourse(false);\r\n\r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(`${BACKEND_URL}/course/new`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ course }),\r\n    });\r\n    const json = await res.json(); //Returned data\r\n    //With our id'd course, put it into the list.\r\n    setCourses([...courses, json]);\r\n\r\n    return true;\r\n  };\r\n\r\n  // Delete Course\r\n  const deleteCourse = async (_id, code) => {\r\n    const res = await fetch(`${BACKEND_URL}/course/delete`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ course: { _id } }),\r\n    });\r\n\r\n    const json = await res.json(); //Returned data\r\n\r\n    if (json.n === 1) {\r\n      setCourses(courses.filter((course) => course._id !== _id));\r\n      for (const task of tasks) {\r\n        if (task.course === code) {\r\n          await deleteTask(task._id);\r\n        }\r\n      }\r\n      setTasks(tasks.filter((task) => task.course !== code));\r\n      setTaskToEdit(-1);\r\n      // alert(\"the course and its related tasks are deleted\");\r\n    } else {\r\n      alert(\"Something weird happened when deleting a course\");\r\n    }\r\n  };\r\n  // Added login form\r\n  return user.username === \"\" ? (\r\n    <main className=\"App\">\r\n      <LoginForm login={login} error={error} />\r\n    </main>\r\n  ) : (\r\n    <>\r\n      <Header username={user.username} />\r\n      <main>\r\n        <section id=\"task-section\">\r\n          <SectionHeader\r\n            id=\"task-section-header\"\r\n            listOfWhat=\"Tasks\"\r\n            onAdd={() => setShowAddTask(true)}\r\n          />\r\n          {showAddTask && (\r\n            <Popup\r\n              content={<AddTask onAdd={addTask} courses={courses} />}\r\n              handleClose={() => setShowAddTask(false)}\r\n            />\r\n          )}\r\n          {tasks.length > 0 ? (\r\n            <Tasks\r\n              tasks={tasks}\r\n              taskToEdit={taskToEdit}\r\n              setTaskToEdit={setTaskToEdit}\r\n              onEdit={editTask}\r\n              onEditStatus={editTaskStatus}\r\n              onDelete={deleteTask}\r\n              courses={courses}\r\n            />\r\n          ) : (\r\n            \"No tasks to show\"\r\n          )}\r\n        </section>\r\n        <section id=\"course-section\">\r\n          <SectionHeader\r\n            id=\"course-section-header\"\r\n            listOfWhat=\"Courses\"\r\n            onAdd={() => setShowAddCourse(true)}\r\n          />\r\n          {showAddCourse && (\r\n            <Popup\r\n              content={<AddCourse onAdd={addCourse} />}\r\n              handleClose={() => setShowAddCourse(false)}\r\n            />\r\n          )}\r\n          {courses.length > 0 ? (\r\n            <Courses courses={courses} onDelete={deleteCourse} />\r\n          ) : (\r\n            \"No courses to show\"\r\n          )}\r\n        </section>\r\n        <section style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <button onClick={Logout} id=\"logout\">\r\n            Logout\r\n          </button>\r\n        </section>\r\n      </main>\r\n      <footer></footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}