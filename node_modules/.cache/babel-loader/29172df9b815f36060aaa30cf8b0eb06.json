{"ast":null,"code":"var _jsxFileName = \"/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport SectionHeader from \"./components/SectionHeader\";\nimport Popup from \"./components/Popup\";\nimport AddCourse from \"./components/AddCourse\";\nimport Courses from \"./components/Courses\";\nimport Tasks from \"./components/Tasks\";\nimport LoginForm from \"./components/LoginForm\";\nimport About from \"./components/About\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Obtaining the backend url\n  const BACKEND_URL = process.env.NODE_ENV === \"development\" && process.env.REACT_APP_ENV !== \"production\" ? \"http://localhost:8080\" : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\"; // State\n\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [justLoggedOut, setJustLoggedOut] = useState(false);\n  const [logoutMessage, setLogoutMessage] = useState(\"Successfully logged out\");\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [showAddCourse, setShowAddCourse] = useState(false);\n  const [showAboutPage, setShowAboutPage] = useState(false);\n  const [tasks, setTasks] = useState([\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      name: string,\r\n      course: string,\r\n      dueDateTime: string,\r\n      reminder: boolean,\r\n      ownerUser: string,\r\n      status?: string,\r\n    }\r\n    Note 1: dueDateTime should be formatted like \"2021-11-01T19:06\"\r\n    Note 3: status should be \"COMPLETED\" or \"INCOMPLETE\"\r\n    */\n  ]);\n  const [courses, setCourses] = useState([\n    /* (updated nov 26) element schema:\r\n    {\r\n      _id: string,\r\n      code: string,\r\n      name: string,\r\n      term: string,\r\n      ownerUser: string,\r\n    }\r\n    */\n  ]);\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\n  // Toggle About Page Function\n\n  const toggleAbout = () => {\n    setShowAboutPage(!showAboutPage);\n  }; // Login info\n\n\n  const login = async details => {\n    try {\n      const username = details.username;\n      const password = details.password;\n      let user = await fetch(`${BACKEND_URL}/user/login/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      if (400 <= user.status && user.status < 500) {\n        alert(\"Username or password is incorrect. Or there is server-related error but unlikely.\");\n      } else {\n        user = await user.json();\n\n        if (details.username === user.username && details.password === user.password) {\n          // alert(\"Logged in\");\n          setUser({\n            username: details.username,\n            password: details.password\n          });\n        } else {\n          alert(\"Username or password is incorrect.\");\n        }\n      }\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  };\n\n  const register = async RegisterInfo => {\n    try {\n      const username = RegisterInfo.username;\n      const password = RegisterInfo.password;\n\n      if (username.trim() === \"\" || password.trim() === \"\") {\n        alert(\"Cannot have empty username or password\");\n        return;\n      } //Send\n\n\n      let user = await fetch(`${BACKEND_URL}/user/new/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      }); //Receive\n\n      if (user.status === 200) {\n        let userdata = await user.json();\n        setUser({\n          username: userdata.username,\n          password: userdata.password\n        });\n      } else if (user.status === 409) {\n        alert(\"Failed to register new user: Provided username is already in use.\");\n      } else {\n        alert(\"Unknown error occured on new user registration attempt. Get the devs\");\n      }\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  };\n\n  const Logout = async () => {\n    try {\n      let username = user.username;\n      let password = user.password;\n      let res = await fetch(`${BACKEND_URL}/user/logout`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      if (res.status === 200) {\n        setLogoutMessage(\"Successfully logged out\");\n      } else {\n        setLogoutMessage(\"Server response code \" + res.status);\n      }\n    } catch (e) {\n      setLogoutMessage(\"Server unresponsive about Logout.\");\n    }\n\n    setJustLoggedOut(true);\n    setTimeout(() => setJustLoggedOut(false), 3000);\n    setUser({\n      username: \"\",\n      password: \"\"\n    });\n  }; // Get task and course list\n\n\n  useEffect(() => {\n    try {\n      if (user.username !== \"\") {\n        const getTasks = async () => {\n          let tasksFromServer = await fetch(`${BACKEND_URL}/tasks/${user.username}`);\n          tasksFromServer = await tasksFromServer.json();\n          setTasks(tasksFromServer);\n        };\n\n        getTasks();\n\n        const getCourses = async () => {\n          let coursesFromServer = await fetch(`${BACKEND_URL}/courses/${user.username}`);\n          coursesFromServer = await coursesFromServer.json();\n          coursesFromServer = coursesFromServer.map(course => ({ ...course,\n            id: course._id\n          }));\n          setCourses(coursesFromServer);\n        };\n\n        getCourses();\n      } else {\n        setTasks([]);\n        setCourses([]);\n      }\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  }, [BACKEND_URL, user.username]); // Add Task\n\n  const addTask = async task => {\n    try {\n      setShowAddTask(false);\n      task.ownerUser = user.username;\n      task.password = user.password; //Send POST request to backend, expecting a return.\n      //Note that we don't handle id creation: handled by\n      //database. All returned by backend.\n\n      const res = await fetch(`${BACKEND_URL}/task/new`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        //We add additional {} around task because the\n        //json formatted expected by the backend is literally\n        //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\n        body: JSON.stringify({\n          task\n        })\n      });\n      const json = await res.json(); //Returned data\n      //With our id'd course, put it into the list.\n\n      setTasks([...tasks, json]); //const newTask = { id, ...task };\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  }; // Edit Task\n\n\n  const editTask = async (newName, newCourse, newDueDateTime) => {\n    try {\n      newName = newName.trim();\n\n      if (newName === \"\") {\n        alert(\"Please give a non-empty name\");\n        return false;\n      } else {\n        await fetch(`${BACKEND_URL}/task/update`, {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          //We add additional {} around task because the\n          //json formatted expected by the backend is literally\n          //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\n          body: JSON.stringify({\n            task: {\n              _id: taskToEdit,\n              name: newName,\n              course: newCourse === \"\" ? \" \" : newCourse,\n              // if you set the value to \"\" it won't change\n              dueDateTime: newDueDateTime === \"\" ? \" \" : newDueDateTime\n            }\n          })\n        });\n        setTasks(tasks.map(task => task._id === taskToEdit ? { ...task,\n          name: newName,\n          course: newCourse,\n          dueDateTime: newDueDateTime\n        } : task));\n        return true;\n      }\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  };\n\n  const editTaskStatus = async (taskToEdit, newStatus) => {\n    try {\n      await fetch(`${BACKEND_URL}/task/update`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          task: {\n            _id: taskToEdit,\n            status: newStatus\n          }\n        })\n      });\n      setTasks(tasks.map(task => task._id === taskToEdit ? { ...task,\n        status: newStatus\n      } : task));\n    } catch (e) {\n      alert(\"An error occured: \" + e.message);\n    }\n  }; // Delete Task\n\n\n  const deleteTask = async _id => {\n    try {\n      await fetch(`${BACKEND_URL}/task/delete`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        //We add additional {} around course because the\n        //json formatted expected by the backend is literally\n        //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n        body: JSON.stringify({\n          task: {\n            _id\n          }\n        })\n      });\n      setTasks(tasks.filter(task => task._id !== _id));\n      setTaskToEdit(-1); // alert(\"the task is deleted\");\n    } catch (e) {\n      alert(\"An error occured: \" + e.message);\n    }\n  };\n\n  const addCourse = async course => {\n    try {\n      //Ensure we're not adding a redundant course.\n      for (const existingCourse of courses) {\n        if (course.code === existingCourse.code) {\n          alert(\"This course code already exists\");\n          return false;\n        }\n      } //Put away the add course window.\n\n\n      setShowAddCourse(false);\n      course.ownerUser = user.username;\n      course.password = user.password; //Send POST request to backend, expecting a return.\n      //Note that we don't handle id creation: handled by\n      //database. All returned by backend.\n\n      const res = await fetch(`${BACKEND_URL}/course/new`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        //We add additional {} around course because the\n        //json formatted expected by the backend is literally\n        //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n        body: JSON.stringify({\n          course\n        })\n      });\n      const json = await res.json(); //Returned data\n      //With our id'd course, put it into the list.\n\n      setCourses([...courses, json]);\n    } catch (e) {\n      alert(\"A server-side error occured: \" + e.message);\n    }\n  }; // Delete Course\n\n\n  const deleteCourse = async (_id, code) => {\n    try {\n      const res = await fetch(`${BACKEND_URL}/course/delete`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          course: {\n            _id\n          }\n        })\n      });\n      const json = await res.json(); //Returned data\n\n      if (json.n === 1) {\n        setCourses(courses.filter(course => course._id !== _id));\n\n        for (const task of tasks) {\n          if (task.course === code) {\n            await deleteTask(task._id);\n          }\n        }\n\n        setTasks(tasks.filter(task => task.course !== code));\n        setTaskToEdit(-1); // alert(\"the course and its related tasks are deleted\");\n      } else {\n        alert(\"Something weird happened when deleting a course\");\n      }\n    } catch (e) {\n      alert(\"An error occured: \" + e.message);\n    }\n  }; // Added login form\n\n\n  const pages = () => {\n    if (showAboutPage) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleAbout,\n            id: \"About\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      if (user.username === \"\") {\n        return /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"App\",\n          style: {\n            display: \"grid\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [/*#__PURE__*/_jsxDEV(LoginForm, {\n              login: login,\n              register: register\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"inline\",\n                textAlign: \"center\"\n              },\n              children: justLoggedOut && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: logoutMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"25px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: toggleAbout,\n                id: \"About\",\n                children: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            username: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n            children: [/*#__PURE__*/_jsxDEV(\"section\", {\n              id: \"task-section\",\n              children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n                id: \"task-section-header\",\n                listOfWhat: \"Tasks\",\n                onAdd: () => setShowAddTask(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 17\n              }, this), showAddTask && /*#__PURE__*/_jsxDEV(Popup, {\n                content: /*#__PURE__*/_jsxDEV(AddTask, {\n                  onAdd: addTask,\n                  courses: courses\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 30\n                }, this),\n                handleClose: () => setShowAddTask(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 19\n              }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n                tasks: tasks,\n                taskToEdit: taskToEdit,\n                setTaskToEdit: setTaskToEdit,\n                onEdit: editTask,\n                onEditStatus: editTaskStatus,\n                onDelete: deleteTask,\n                courses: courses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this) : \"No tasks to show\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              id: \"course-section\",\n              children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n                id: \"course-section-header\",\n                listOfWhat: \"Courses\",\n                onAdd: () => setShowAddCourse(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 17\n              }, this), showAddCourse && /*#__PURE__*/_jsxDEV(Popup, {\n                content: /*#__PURE__*/_jsxDEV(AddCourse, {\n                  onAdd: addCourse\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 30\n                }, this),\n                handleClose: () => setShowAddCourse(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 19\n              }, this), courses.length > 0 ? /*#__PURE__*/_jsxDEV(Courses, {\n                courses: courses,\n                onDelete: deleteCourse\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 19\n              }, this) : \"No courses to show\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"center\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: Logout,\n                id: \"logout\",\n                children: \"Logout\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"center\",\n                margin: 20\n              },\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: toggleAbout,\n                id: \"About\",\n                children: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      }\n    }\n  };\n\n  return pages();\n};\n\n_s(App, \"gBhPpozYephtUwfTVzTEmEaImY0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js"],"names":["Header","useState","useEffect","AddTask","SectionHeader","Popup","AddCourse","Courses","Tasks","LoginForm","About","App","BACKEND_URL","process","env","NODE_ENV","REACT_APP_ENV","user","setUser","username","password","justLoggedOut","setJustLoggedOut","logoutMessage","setLogoutMessage","showAddTask","setShowAddTask","showAddCourse","setShowAddCourse","showAboutPage","setShowAboutPage","tasks","setTasks","courses","setCourses","taskToEdit","setTaskToEdit","toggleAbout","login","details","fetch","method","headers","body","JSON","stringify","status","alert","json","e","message","register","RegisterInfo","trim","userdata","Logout","res","setTimeout","getTasks","tasksFromServer","getCourses","coursesFromServer","map","course","id","_id","addTask","task","ownerUser","editTask","newName","newCourse","newDueDateTime","name","dueDateTime","editTaskStatus","newStatus","deleteTask","filter","addCourse","existingCourse","code","deleteCourse","n","pages","display","justifyContent","textAlign","padding","length","margin"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\r\nimport { useState, useEffect } from \"react\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport SectionHeader from \"./components/SectionHeader\";\r\nimport Popup from \"./components/Popup\";\r\nimport AddCourse from \"./components/AddCourse\";\r\nimport Courses from \"./components/Courses\";\r\nimport Tasks from \"./components/Tasks\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport About from \"./components/About\";\r\n\r\nconst App = () => {\r\n  // Obtaining the backend url\r\n  const BACKEND_URL =\r\n    process.env.NODE_ENV === \"development\" &&\r\n    process.env.REACT_APP_ENV !== \"production\"\r\n      ? \"http://localhost:8080\"\r\n      : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\";\r\n\r\n  // State\r\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\r\n  const [justLoggedOut, setJustLoggedOut] = useState(false);\r\n  const [logoutMessage, setLogoutMessage] = useState(\"Successfully logged out\")\r\n\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [showAddCourse, setShowAddCourse] = useState(false);\r\n\r\n  const [showAboutPage, setShowAboutPage] = useState(false);\r\n\r\n  const [tasks, setTasks] = useState([\r\n    /* (updated nov 17) element schema:\r\n    {\r\n      _id: string,\r\n      name: string,\r\n      course: string,\r\n      dueDateTime: string,\r\n      reminder: boolean,\r\n      ownerUser: string,\r\n      status?: string,\r\n    }\r\n    Note 1: dueDateTime should be formatted like \"2021-11-01T19:06\"\r\n    Note 3: status should be \"COMPLETED\" or \"INCOMPLETE\"\r\n    */\r\n  ]);\r\n  const [courses, setCourses] = useState([\r\n    /* (updated nov 26) element schema:\r\n    {\r\n      _id: string,\r\n      code: string,\r\n      name: string,\r\n      term: string,\r\n      ownerUser: string,\r\n    }\r\n    */\r\n  ]);\r\n\r\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\r\n\r\n  // Toggle About Page Function\r\n  const toggleAbout = () => {\r\n    setShowAboutPage(!showAboutPage);\r\n  };\r\n\r\n  // Login info\r\n  const login = async (details) => {\r\n    try {\r\n      const username = details.username;\r\n      const password = details.password;\r\n      let user = await fetch(`${BACKEND_URL}/user/login/`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username,\r\n          password,\r\n        }),\r\n      });\r\n\r\n      if (400 <= user.status && user.status < 500) {\r\n        alert(\r\n          \"Username or password is incorrect. Or there is server-related error but unlikely.\"\r\n        );\r\n      } else {\r\n        user = await user.json();\r\n        if (\r\n          details.username === user.username &&\r\n          details.password === user.password\r\n        ) {\r\n          // alert(\"Logged in\");\r\n          setUser({\r\n            username: details.username,\r\n            password: details.password,\r\n          });\r\n        } else {\r\n          alert(\"Username or password is incorrect.\");\r\n        }\r\n      }\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  const register = async (RegisterInfo) => {\r\n    try {\r\n      const username = RegisterInfo.username;\r\n      const password = RegisterInfo.password;\r\n\r\n      if (username.trim() === \"\" || password.trim() === \"\") {\r\n        alert(\"Cannot have empty username or password\");\r\n        return;\r\n      }\r\n\r\n      //Send\r\n      let user = await fetch(`${BACKEND_URL}/user/new/`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username,\r\n          password,\r\n        }),\r\n      });\r\n      //Receive\r\n      if (user.status === 200) {\r\n        let userdata = await user.json();\r\n        setUser({\r\n          username: userdata.username,\r\n          password: userdata.password,\r\n        });\r\n      } else if (user.status === 409) {\r\n        alert(\r\n          \"Failed to register new user: Provided username is already in use.\"\r\n        );\r\n      } else {\r\n        alert(\r\n          \"Unknown error occured on new user registration attempt. Get the devs\"\r\n        );\r\n      }\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  const Logout = async () => {\r\n    try{\r\n      let username = user.username;\r\n      let password = user.password;\r\n      let res = await fetch(`${BACKEND_URL}/user/logout`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      if(res.status === 200){\r\n        setLogoutMessage(\"Successfully logged out\");\r\n      } else {\r\n        setLogoutMessage(\"Server response code \" + res.status);\r\n      }\r\n\r\n    } catch (e) {\r\n      setLogoutMessage(\"Server unresponsive about Logout.\");\r\n    }\r\n    \r\n    setJustLoggedOut(true);\r\n    setTimeout(() => setJustLoggedOut(false), 3000);\r\n    setUser({ username: \"\", password: \"\" });\r\n  };\r\n\r\n  // Get task and course list\r\n  useEffect(() => {\r\n    try {\r\n      if (user.username !== \"\") {\r\n        const getTasks = async () => {\r\n          let tasksFromServer = await fetch(\r\n            `${BACKEND_URL}/tasks/${user.username}`\r\n          );\r\n          tasksFromServer = await tasksFromServer.json();\r\n          setTasks(tasksFromServer);\r\n        };\r\n\r\n        getTasks();\r\n\r\n        const getCourses = async () => {\r\n          let coursesFromServer = await fetch(\r\n            `${BACKEND_URL}/courses/${user.username}`\r\n          );\r\n          coursesFromServer = await coursesFromServer.json();\r\n          coursesFromServer = coursesFromServer.map((course) => ({\r\n            ...course,\r\n            id: course._id,\r\n          }));\r\n          setCourses(coursesFromServer);\r\n        };\r\n\r\n        getCourses();\r\n      } else {\r\n        setTasks([]);\r\n        setCourses([]);\r\n      }\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  }, [BACKEND_URL, user.username]);\r\n\r\n  // Add Task\r\n  const addTask = async (task) => {\r\n    try {\r\n      setShowAddTask(false);\r\n\r\n      task.ownerUser = user.username;\r\n      task.password = user.password;\r\n      //Send POST request to backend, expecting a return.\r\n      //Note that we don't handle id creation: handled by\r\n      //database. All returned by backend.\r\n      const res = await fetch(`${BACKEND_URL}/task/new`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        //We add additional {} around task because the\r\n        //json formatted expected by the backend is literally\r\n        //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\r\n        body: JSON.stringify({ task }),\r\n      });\r\n      const json = await res.json(); //Returned data\r\n\r\n      //With our id'd course, put it into the list.\r\n      setTasks([...tasks, json]);\r\n\r\n      //const newTask = { id, ...task };\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  // Edit Task\r\n  const editTask = async (newName, newCourse, newDueDateTime) => {\r\n    try {\r\n      newName = newName.trim();\r\n      if (newName === \"\") {\r\n        alert(\"Please give a non-empty name\");\r\n\r\n        return false;\r\n      } else {\r\n        await fetch(`${BACKEND_URL}/task/update`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          //We add additional {} around task because the\r\n          //json formatted expected by the backend is literally\r\n          //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\r\n          body: JSON.stringify({\r\n            task: {\r\n              _id: taskToEdit,\r\n              name: newName,\r\n              course: newCourse === \"\" ? \" \" : newCourse, // if you set the value to \"\" it won't change\r\n              dueDateTime: newDueDateTime === \"\" ? \" \" : newDueDateTime,\r\n            },\r\n          }),\r\n        });\r\n        setTasks(\r\n          tasks.map((task) =>\r\n            task._id === taskToEdit\r\n              ? {\r\n                  ...task,\r\n                  name: newName,\r\n                  course: newCourse,\r\n                  dueDateTime: newDueDateTime,\r\n                }\r\n              : task\r\n          )\r\n        );\r\n\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  const editTaskStatus = async (taskToEdit, newStatus) => {\r\n    try {\r\n      await fetch(`${BACKEND_URL}/task/update`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          task: {\r\n            _id: taskToEdit,\r\n            status: newStatus,\r\n          },\r\n        }),\r\n      });\r\n      setTasks(\r\n        tasks.map((task) =>\r\n          task._id === taskToEdit ? { ...task, status: newStatus } : task\r\n        )\r\n      );\r\n    } catch (e) {\r\n      alert(\"An error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  // Delete Task\r\n  const deleteTask = async (_id) => {\r\n    try {\r\n      await fetch(`${BACKEND_URL}/task/delete`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        //We add additional {} around course because the\r\n        //json formatted expected by the backend is literally\r\n        //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n        body: JSON.stringify({ task: { _id } }),\r\n      });\r\n\r\n      setTasks(tasks.filter((task) => task._id !== _id));\r\n      setTaskToEdit(-1);\r\n      // alert(\"the task is deleted\");\r\n    } catch (e) {\r\n      alert(\"An error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  const addCourse = async (course) => {\r\n    try {\r\n      //Ensure we're not adding a redundant course.\r\n      for (const existingCourse of courses) {\r\n        if (course.code === existingCourse.code) {\r\n          alert(\"This course code already exists\");\r\n\r\n          return false;\r\n        }\r\n      }\r\n\r\n      //Put away the add course window.\r\n      setShowAddCourse(false);\r\n\r\n      course.ownerUser = user.username;\r\n      course.password = user.password;\r\n      //Send POST request to backend, expecting a return.\r\n      //Note that we don't handle id creation: handled by\r\n      //database. All returned by backend.\r\n      const res = await fetch(`${BACKEND_URL}/course/new`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        //We add additional {} around course because the\r\n        //json formatted expected by the backend is literally\r\n        //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n        body: JSON.stringify({ course }),\r\n      });\r\n      const json = await res.json(); //Returned data\r\n      //With our id'd course, put it into the list.\r\n      setCourses([...courses, json]);\r\n    } catch (e) {\r\n      alert(\"A server-side error occured: \" + e.message);\r\n    }\r\n  };\r\n\r\n  // Delete Course\r\n  const deleteCourse = async (_id, code) => {\r\n    try {\r\n      const res = await fetch(`${BACKEND_URL}/course/delete`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ course: { _id } }),\r\n      });\r\n\r\n      const json = await res.json(); //Returned data\r\n\r\n      if (json.n === 1) {\r\n        setCourses(courses.filter((course) => course._id !== _id));\r\n        for (const task of tasks) {\r\n          if (task.course === code) {\r\n            await deleteTask(task._id);\r\n          }\r\n        }\r\n        setTasks(tasks.filter((task) => task.course !== code));\r\n        setTaskToEdit(-1);\r\n        // alert(\"the course and its related tasks are deleted\");\r\n      } else {\r\n        alert(\"Something weird happened when deleting a course\");\r\n      }\r\n    } catch (e) {\r\n      alert(\"An error occured: \" + e.message);\r\n    }\r\n  };\r\n  // Added login form\r\n\r\n  const pages = () => {\r\n    if (showAboutPage) {\r\n      return (\r\n        <>\r\n          <About />\r\n          <section style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <button onClick={toggleAbout} id=\"About\">\r\n              Back\r\n            </button>\r\n          </section>\r\n        </>\r\n      );\r\n    } else {\r\n      if (user.username === \"\") {\r\n        return (\r\n          <main className=\"App\" style={{ display: \"grid\" }}>\r\n            <section>\r\n              <LoginForm login={login} register={register} />\r\n              <div style={{ display: \"inline\", textAlign: \"center\" }}>\r\n                {justLoggedOut && <div>{logoutMessage}</div>}\r\n              </div>\r\n              <section\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  padding: \"25px\",\r\n                }}\r\n              >\r\n                <button onClick={toggleAbout} id=\"About\">\r\n                  About\r\n                </button>\r\n              </section>\r\n            </section>\r\n          </main>\r\n        );\r\n      } else {\r\n        return (\r\n          <>\r\n            <Header username={user.username} />\r\n            <main>\r\n              <section id=\"task-section\">\r\n                <SectionHeader\r\n                  id=\"task-section-header\"\r\n                  listOfWhat=\"Tasks\"\r\n                  onAdd={() => setShowAddTask(true)}\r\n                />\r\n                {showAddTask && (\r\n                  <Popup\r\n                    content={<AddTask onAdd={addTask} courses={courses} />}\r\n                    handleClose={() => setShowAddTask(false)}\r\n                  />\r\n                )}\r\n                {tasks.length > 0 ? (\r\n                  <Tasks\r\n                    tasks={tasks}\r\n                    taskToEdit={taskToEdit}\r\n                    setTaskToEdit={setTaskToEdit}\r\n                    onEdit={editTask}\r\n                    onEditStatus={editTaskStatus}\r\n                    onDelete={deleteTask}\r\n                    courses={courses}\r\n                  />\r\n                ) : (\r\n                  \"No tasks to show\"\r\n                )}\r\n              </section>\r\n              <section id=\"course-section\">\r\n                <SectionHeader\r\n                  id=\"course-section-header\"\r\n                  listOfWhat=\"Courses\"\r\n                  onAdd={() => setShowAddCourse(true)}\r\n                />\r\n                {showAddCourse && (\r\n                  <Popup\r\n                    content={<AddCourse onAdd={addCourse} />}\r\n                    handleClose={() => setShowAddCourse(false)}\r\n                  />\r\n                )}\r\n                {courses.length > 0 ? (\r\n                  <Courses courses={courses} onDelete={deleteCourse} />\r\n                ) : (\r\n                  \"No courses to show\"\r\n                )}\r\n              </section>\r\n              <section style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <button onClick={Logout} id=\"logout\">\r\n                  Logout\r\n                </button>\r\n              </section>\r\n              <section\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  margin: 20,\r\n                }}\r\n              >\r\n                <button onClick={toggleAbout} id=\"About\">\r\n                  About\r\n                </button>\r\n              </section>\r\n            </main>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return pages();\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}