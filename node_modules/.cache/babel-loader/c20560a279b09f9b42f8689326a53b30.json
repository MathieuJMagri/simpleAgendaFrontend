{"ast":null,"code":"var _jsxFileName = \"/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport { useState, useEffect } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport CourseHeader from \"./components/CourseHeader\";\nimport CoursePopup from \"./components/CoursePopup\";\nimport AddCourse from \"./components/AddCourse\";\nimport CourseList from \"./components/CourseList\";\nimport Tasks from \"./components/Tasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"Peiyong\"); //Obtaining the backend url\n\n  const BACKEND_URL = process.env.NODE_ENV === \"development\" ? \"http://localhost:8080\" : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\"; // For AddTask\n\n  const [tasks, setTasks] = useState([]);\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\n\n  const [showAddCourse, setShowAddCourse] = useState(false);\n  const [courseList, setCourseList] = useState([]);\n  useEffect(() => {\n    // Fetch tasks\n    const fetchTasks = async () => {\n      const res = await fetch(BACKEND_URL + \"/tasks\", {\n        method: \"GET\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const datas = await res.json();\n      return datas;\n    }; // Fetch courses\n\n\n    const fetchCourses = async () => {\n      const res = await fetch(BACKEND_URL + \"/courses\", {\n        method: \"GET\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const datas = await res.json();\n      return datas;\n    };\n\n    const getCourses = async () => {\n      let coursesFromServer = await fetchCourses();\n      coursesFromServer = coursesFromServer.map(course => ({ ...course,\n        id: course._id\n      }));\n      setCourseList(coursesFromServer);\n    };\n\n    getCourses();\n\n    const getTasks = async () => {\n      let tasksFromServer = await fetchTasks();\n      tasksFromServer = tasksFromServer.map(task => ({ ...task,\n        id: task._id\n      }));\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const addCourse = async course => {\n    //Ensure we're not adding a redundant course.\n    for (const existingCourse of courseList) {\n      if (course.code === existingCourse.code) {\n        alert(\"This course code already exists\");\n        return false;\n      }\n    } //Put away the add course window.\n\n\n    setShowAddCourse(!showAddCourse); //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n\n    const res = await fetch(BACKEND_URL + \"/course/new\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        course\n      })\n    });\n    const data = await res.json(); //Returned data\n\n    data.id = data._id; //With our id'd course, put it into the list.\n\n    setCourseList([...courseList, data]);\n    return true;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n    const res = await fetch(BACKEND_URL + \"/task/new\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around task because the\n      //json formatted expected by the backend is literally\n      //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\n      body: JSON.stringify({\n        task\n      })\n    });\n    const data = await res.json(); //Returned data\n    //Note that the returned id is task._id, not\n    //task.id. We must reparse this or otherwise\n    //change everything else to work with _id,\n    //including tests.\n\n    data.id = data._id; //With our id'd course, put it into the list.\n\n    setTasks([...tasks, data]); //const newTask = { id, ...task };\n  }; // Edit Task\n\n\n  const editTask = newName => {\n    if (newName === \"\") {\n      alert(\"Please give a non-empty name\");\n      return false;\n    } else {\n      setTasks(tasks.map(task => task.id === taskToEdit ? { ...task,\n        text: newName\n      } : task));\n      return true;\n    }\n  }; // Delete Task\n\n\n  const deleteTask = async id => {\n    const task = {\n      _id: id\n    };\n    const res = await fetch(BACKEND_URL + \"/task/delete\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        task\n      })\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n    alert(\"the task is deleted\");\n  }; // Delete Course\n\n\n  const deleteCourse = async (id, code) => {\n    const course = {\n      _id: id\n    };\n    const res = await fetch(BACKEND_URL + \"/course/delete\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        course\n      })\n    });\n    const data = await res.json(); //Returned data\n\n    if (data.n === 1) {\n      setCourseList(courseList.filter(course => course._id !== id));\n      setTasks(tasks.filter(task => task.course !== code));\n      setTaskToEdit(-1);\n      alert(\"the course and its related tasks are deleted\");\n    } else {\n      alert(\"Something weird happened when deleting a course\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Task-Section\",\n      children: [/*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask,\n        courseList: courseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        taskToEdit: taskToEdit,\n        setTaskToEdit: setTaskToEdit,\n        onEdit: editTask,\n        onDelete: deleteTask,\n        courseList: courseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this) : \"No tasks to show\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Course-Section\",\n      children: [/*#__PURE__*/_jsxDEV(CourseHeader, {\n        onAdd: () => setShowAddCourse(!showAddCourse),\n        showAdd: showAddCourse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), showAddCourse && /*#__PURE__*/_jsxDEV(CoursePopup, {\n        content: /*#__PURE__*/_jsxDEV(AddCourse, {\n          onAdd: addCourse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 22\n        }, this),\n        handleClose: () => setShowAddCourse(!showAddCourse)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), courseList.length > 0 ? /*#__PURE__*/_jsxDEV(CourseList, {\n        courseList: courseList,\n        onDelete: deleteCourse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this) : \"No courses to show\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"m+VSmwj4Y6M9855aaK/t4aNG2B4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js"],"names":["Header","useState","useEffect","AddTask","CourseHeader","CoursePopup","AddCourse","CourseList","Tasks","App","username","setUsername","BACKEND_URL","process","env","NODE_ENV","tasks","setTasks","showAddTask","setShowAddTask","taskToEdit","setTaskToEdit","showAddCourse","setShowAddCourse","courseList","setCourseList","fetchTasks","res","fetch","method","headers","datas","json","fetchCourses","getCourses","coursesFromServer","map","course","id","_id","getTasks","tasksFromServer","task","addCourse","existingCourse","code","alert","body","JSON","stringify","data","addTask","editTask","newName","text","deleteTask","filter","deleteCourse","n","length"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\r\nimport { useState, useEffect } from \"react\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport CourseHeader from \"./components/CourseHeader\";\r\nimport CoursePopup from \"./components/CoursePopup\";\r\nimport AddCourse from \"./components/AddCourse\";\r\nimport CourseList from \"./components/CourseList\";\r\nimport Tasks from \"./components/Tasks\";\r\n\r\nconst App = () => {\r\n  const [username, setUsername] = useState(\"Peiyong\");\r\n\r\n  //Obtaining the backend url\r\n  const BACKEND_URL =\r\n    process.env.NODE_ENV === \"development\"\r\n      ? \"http://localhost:8080\"\r\n      : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\";\r\n\r\n  // For AddTask\r\n  const [tasks, setTasks] = useState([]);\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\r\n\r\n  const [showAddCourse, setShowAddCourse] = useState(false);\r\n  const [courseList, setCourseList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch tasks\r\n    const fetchTasks = async () => {\r\n      const res = await fetch(BACKEND_URL + \"/tasks\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      });\r\n      const datas = await res.json();\r\n      return datas;\r\n    };\r\n\r\n    // Fetch courses\r\n    const fetchCourses = async () => {\r\n      const res = await fetch(BACKEND_URL + \"/courses\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      });\r\n      const datas = await res.json();\r\n      return datas;\r\n    };\r\n\r\n    const getCourses = async () => {\r\n      let coursesFromServer = await fetchCourses();\r\n      coursesFromServer = coursesFromServer.map((course) => ({\r\n        ...course,\r\n        id: course._id,\r\n      }));\r\n      setCourseList(coursesFromServer);\r\n    };\r\n\r\n    getCourses();\r\n\r\n    const getTasks = async () => {\r\n      let tasksFromServer = await fetchTasks();\r\n      tasksFromServer = tasksFromServer.map((task) => ({\r\n        ...task,\r\n        id: task._id,\r\n      }));\r\n      setTasks(tasksFromServer);\r\n    };\r\n\r\n    getTasks();\r\n  }, []);\r\n\r\n  const addCourse = async (course) => {\r\n    //Ensure we're not adding a redundant course.\r\n    for (const existingCourse of courseList) {\r\n      if (course.code === existingCourse.code) {\r\n        alert(\"This course code already exists\");\r\n\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //Put away the add course window.\r\n    setShowAddCourse(!showAddCourse);\r\n\r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(BACKEND_URL + \"/course/new\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ course }),\r\n    });\r\n    const data = await res.json(); //Returned data\r\n    data.id = data._id;\r\n\r\n    //With our id'd course, put it into the list.\r\n    setCourseList([...courseList, data]);\r\n    return true;\r\n  };\r\n\r\n  // Add Task\r\n  const addTask = async (task) => {\r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(BACKEND_URL + \"/task/new\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around task because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}.\r\n      body: JSON.stringify({ task }),\r\n    });\r\n    const data = await res.json(); //Returned data\r\n\r\n    //Note that the returned id is task._id, not\r\n    //task.id. We must reparse this or otherwise\r\n    //change everything else to work with _id,\r\n    //including tests.\r\n    data.id = data._id;\r\n\r\n    //With our id'd course, put it into the list.\r\n    setTasks([...tasks, data]);\r\n\r\n    //const newTask = { id, ...task };\r\n  };\r\n\r\n  // Edit Task\r\n  const editTask = (newName) => {\r\n    if (newName === \"\") {\r\n      alert(\"Please give a non-empty name\");\r\n\r\n      return false;\r\n    } else {\r\n      setTasks(\r\n        tasks.map((task) =>\r\n          task.id === taskToEdit ? { ...task, text: newName } : task\r\n        )\r\n      );\r\n\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // Delete Task\r\n  const deleteTask = async (id) => {\r\n    const task = { _id: id };\r\n    const res = await fetch(BACKEND_URL + \"/task/delete\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ task }),\r\n    });\r\n\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n    alert(\"the task is deleted\");\r\n  };\r\n\r\n  // Delete Course\r\n  const deleteCourse = async (id, code) => {\r\n    const course = { _id: id };\r\n    const res = await fetch(BACKEND_URL + \"/course/delete\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n\r\n      body: JSON.stringify({ course }),\r\n    });\r\n\r\n    const data = await res.json(); //Returned data\r\n\r\n    if (data.n === 1) {\r\n      setCourseList(courseList.filter((course) => course._id !== id));\r\n      setTasks(tasks.filter((task) => task.course !== code));\r\n      setTaskToEdit(-1);\r\n      alert(\"the course and its related tasks are deleted\");\r\n    } else {\r\n      alert(\"Something weird happened when deleting a course\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header username={username} />\r\n      <section id=\"Task-Section\">\r\n        <AddTask onAdd={addTask} courseList={courseList} />\r\n        {tasks.length > 0 ? (\r\n          <Tasks\r\n            tasks={tasks}\r\n            taskToEdit={taskToEdit}\r\n            setTaskToEdit={setTaskToEdit}\r\n            onEdit={editTask}\r\n            onDelete={deleteTask}\r\n            courseList={courseList}\r\n          />\r\n        ) : (\r\n          \"No tasks to show\"\r\n        )}\r\n\r\n        {/* TODO: Add task list */}\r\n      </section>\r\n\r\n      <section id=\"Course-Section\">\r\n        <CourseHeader\r\n          onAdd={() => setShowAddCourse(!showAddCourse)}\r\n          showAdd={showAddCourse}\r\n        />\r\n        {showAddCourse && (\r\n          <CoursePopup\r\n            content={<AddCourse onAdd={addCourse} />}\r\n            handleClose={() => setShowAddCourse(!showAddCourse)}\r\n          />\r\n        )}\r\n        {courseList.length > 0 ? (\r\n          <CourseList courseList={courseList} onDelete={deleteCourse} />\r\n        ) : (\r\n          \"No courses to show\"\r\n        )}\r\n      </section>\r\n\r\n      <footer></footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}