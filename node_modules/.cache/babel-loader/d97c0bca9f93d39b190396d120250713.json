{"ast":null,"code":"var _jsxFileName = \"/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport { useState } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport CourseHeader from \"./components/CourseHeader\";\nimport CoursePopup from \"./components/CoursePopup\";\nimport AddCourse from \"./components/AddCourse\";\nimport CourseList from \"./components/CourseList\";\nimport Tasks from \"./components/Tasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"Peiyong\"); //Obtaining the backend url\n\n  const BACKEND_URL = process.env.NODE_ENV === \"development\" ? \"http://localhost:8080\" : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\"; // For AddTask\n\n  const [tasks, setTasks] = useState([{\n    //THIS IS A HARDCODED PLACEHOLDER UNTIL\n    //WE HAVE ACTUAL DB DATA FLOWING IN. I PUT\n    //THIS IN HERE SO I COULD TEST DELETE FUNCTIONALITY\n    //WITH ALL THESE PARAMETRES STRAIGHT FROM OUR\n    //MONGODB BACKEND.\n    //PLEASE GET US ACTUAL DATA FROM THE BACKEND WITH useEffect\n    //AND REPLACE THIS DUMB BANDAID SOLUTION. THANKS.\n    id: \"617c5862f5ce0043e8e0a921\",\n    name: \"TASK2\",\n    ownerUser: \"POSTMAN\",\n    course: \"FALL2022\",\n    status: \"IN_PROGRESS\"\n  }]);\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\n\n  const [showAddCourse, setShowAddCourse] = useState(false);\n  const [courseList, setCourseList] = useState([{\n    id: 1,\n    code: \"ECSE 428\",\n    name: \"Software Dev\",\n    term: \"Fall21\"\n  }]);\n\n  const addCourse = async course => {\n    //Ensure we're not adding a redundant course.\n    for (const existingCourse of courseList) {\n      if (course.code === existingCourse.code) {\n        alert(\"This course code already exists\");\n        return false;\n      }\n    } //Put away the add course window.\n\n\n    setShowAddCourse(!showAddCourse); //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n\n    const res = await fetch(BACKEND_URL + \"/course/new\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        course\n      })\n    });\n    const data = await res.json(); //Returned data\n    //Note that the returned id is course._id, not\n    //course.id. We must reparse this or otherwise\n    //change everything else to work with _id,\n    //including tests.\n\n    data.id = data._id;\n    delete data._id; //With our id'd course, put it into the list.\n\n    setCourseList([...courseList, data]);\n    return true;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    //Send POST request to backend, expecting a return.\n    //Note that we don't handle id creation: handled by\n    //database. All returned by backend.\n    const res = await fetch(BACKEND_URL + \"/task/new\", {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      //We add additional {} around task because the\n      //json formatted expected by the backend is literally\n      //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}. \n      body: JSON.stringify({\n        task\n      })\n    });\n    const data = await res.json(); //Returned data\n    //Note that the returned id is task._id, not\n    //task.id. We must reparse this or otherwise\n    //change everything else to work with _id,\n    //including tests.\n\n    data.id = data._id;\n    delete data._id; //With our id'd course, put it into the list.\n\n    setTasks([...tasks, data]); //const newTask = { id, ...task };\n  }; // Edit Task\n\n\n  const editTask = newName => {\n    if (newName === \"\") {\n      alert(\"Please give a non-empty name\");\n      return false;\n    } else {\n      setTasks(tasks.map(task => task.id === taskToEdit ? { ...task,\n        text: newName\n      } : task));\n      return true;\n    }\n  }; // Delete Task\n\n\n  const deleteTask = async id => {\n    const task = {\n      id\n    };\n    const res = await fetch(BACKEND_URL + \"/task/delete\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      //We add additional {} around course because the\n      //json formatted expected by the backend is literally\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\n      body: JSON.stringify({\n        task\n      })\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n    alert(\"the task is deleted\");\n  }; // Delete Course\n\n\n  const deleteCourse = (id, code) => {\n    setCourseList(courseList.filter(course => course.id !== id));\n    setTasks(tasks.filter(task => task.course !== code));\n    setTaskToEdit(-1);\n    alert(\"the course and its related tasks are deleted\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Task-Section\",\n      children: [/*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask,\n        courseList: courseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        taskToEdit: taskToEdit,\n        setTaskToEdit: setTaskToEdit,\n        onEdit: editTask,\n        onDelete: deleteTask,\n        courseList: courseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this) : \"No tasks to show\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Course-Section\",\n      children: [/*#__PURE__*/_jsxDEV(CourseHeader, {\n        onAdd: () => setShowAddCourse(!showAddCourse),\n        showAdd: showAddCourse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), showAddCourse && /*#__PURE__*/_jsxDEV(CoursePopup, {\n        content: /*#__PURE__*/_jsxDEV(AddCourse, {\n          onAdd: addCourse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 22\n        }, this),\n        handleClose: () => setShowAddCourse(!showAddCourse)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CourseList, {\n        courseList: courseList,\n        onDelete: deleteCourse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"E0q4ebmKMoJjJTrJwYIi4rGFWwo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mathieujmagri/git/ECSE428_Project_Frontend/src/App.js"],"names":["Header","useState","AddTask","CourseHeader","CoursePopup","AddCourse","CourseList","Tasks","App","username","setUsername","BACKEND_URL","process","env","NODE_ENV","tasks","setTasks","id","name","ownerUser","course","status","showAddTask","setShowAddTask","taskToEdit","setTaskToEdit","showAddCourse","setShowAddCourse","courseList","setCourseList","code","term","addCourse","existingCourse","alert","res","fetch","method","headers","body","JSON","stringify","data","json","_id","addTask","task","editTask","newName","map","text","deleteTask","filter","deleteCourse","length"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\r\nimport { useState } from \"react\";\r\nimport AddTask from \"./components/AddTask\";\r\nimport CourseHeader from \"./components/CourseHeader\";\r\nimport CoursePopup from \"./components/CoursePopup\";\r\nimport AddCourse from \"./components/AddCourse\";\r\nimport CourseList from \"./components/CourseList\";\r\nimport Tasks from \"./components/Tasks\";\r\n\r\nconst App = () => {\r\n  const [username, setUsername] = useState(\"Peiyong\");\r\n\r\n  //Obtaining the backend url\r\n  const BACKEND_URL =\r\n    process.env.NODE_ENV === \"development\"\r\n      ? \"http://localhost:8080\"\r\n      : \"https://mcgill-ecse428-f2021-g7backend.herokuapp.com\";\r\n\r\n  // For AddTask\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      //THIS IS A HARDCODED PLACEHOLDER UNTIL\r\n      //WE HAVE ACTUAL DB DATA FLOWING IN. I PUT\r\n      //THIS IN HERE SO I COULD TEST DELETE FUNCTIONALITY\r\n      //WITH ALL THESE PARAMETRES STRAIGHT FROM OUR\r\n      //MONGODB BACKEND.\r\n      //PLEASE GET US ACTUAL DATA FROM THE BACKEND WITH useEffect\r\n      //AND REPLACE THIS DUMB BANDAID SOLUTION. THANKS.\r\n      id: \"617c5862f5ce0043e8e0a921\",\r\n      name: \"TASK2\",\r\n      ownerUser: \"POSTMAN\",\r\n      course: \"FALL2022\",\r\n      status: \"IN_PROGRESS\",\r\n    },\r\n  ]);\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [taskToEdit, setTaskToEdit] = useState(-1); // value is task ID, -1 means no task to edit\r\n\r\n  const [showAddCourse, setShowAddCourse] = useState(false);\r\n  const [courseList, setCourseList] = useState([\r\n    {\r\n      id: 1,\r\n      code: \"ECSE 428\",\r\n      name: \"Software Dev\",\r\n      term: \"Fall21\",\r\n    },\r\n  ]);\r\n\r\n  const addCourse = async (course) => {\r\n    //Ensure we're not adding a redundant course.\r\n    for (const existingCourse of courseList) {\r\n      if (course.code === existingCourse.code) {\r\n        alert(\"This course code already exists\");\r\n\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //Put away the add course window.\r\n    setShowAddCourse(!showAddCourse);\r\n\r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(BACKEND_URL + \"/course/new\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ course }),\r\n    });\r\n    const data = await res.json(); //Returned data\r\n\r\n    //Note that the returned id is course._id, not\r\n    //course.id. We must reparse this or otherwise\r\n    //change everything else to work with _id,\r\n    //including tests.\r\n    data.id = data._id;\r\n    delete data._id;\r\n\r\n    //With our id'd course, put it into the list.\r\n    setCourseList([...courseList, data]);\r\n\r\n    return true;\r\n  };\r\n\r\n  // Add Task\r\n  const addTask = async (task) => {\r\n    \r\n    //Send POST request to backend, expecting a return.\r\n    //Note that we don't handle id creation: handled by\r\n    //database. All returned by backend.\r\n    const res = await fetch(\r\n      BACKEND_URL + \"/task/new\",\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        },\r\n        //We add additional {} around task because the\r\n        //json formatted expected by the backend is literally\r\n        //{\"task\":{\"name\":...,\"course\":...,\"day\":...,\"reminder\":...}}. \r\n        body: JSON.stringify({task})\r\n      }\r\n    )\r\n    const data = await res.json(); //Returned data\r\n\r\n    //Note that the returned id is task._id, not\r\n    //task.id. We must reparse this or otherwise\r\n    //change everything else to work with _id,\r\n    //including tests.\r\n    data.id = data._id;\r\n    delete data._id;\r\n\r\n    //With our id'd course, put it into the list.\r\n    setTasks([...tasks, data]);\r\n    \r\n    \r\n    //const newTask = { id, ...task };\r\n    \r\n  };\r\n\r\n  // Edit Task\r\n  const editTask = (newName) => {\r\n    if (newName === \"\") {\r\n      alert(\"Please give a non-empty name\");\r\n\r\n      return false;\r\n    } else {\r\n      setTasks(\r\n        tasks.map((task) =>\r\n          task.id === taskToEdit ? { ...task, text: newName } : task\r\n        )\r\n      );\r\n\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // Delete Task\r\n  const deleteTask = async (id) => {\r\n    const task = { id };\r\n    const res = await fetch(BACKEND_URL + \"/task/delete\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      //We add additional {} around course because the\r\n      //json formatted expected by the backend is literally\r\n      //{\"course\":{\"code\":...,\"name\":...,\"term\":...}}.\r\n      body: JSON.stringify({ task }),\r\n    });\r\n\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n    alert(\"the task is deleted\");\r\n  };\r\n\r\n  // Delete Course\r\n  const deleteCourse = (id, code) => {\r\n    setCourseList(courseList.filter((course) => course.id !== id));\r\n    setTasks(tasks.filter((task) => task.course !== code));\r\n    setTaskToEdit(-1);\r\n    alert(\"the course and its related tasks are deleted\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header username={username} />\r\n      <section id=\"Task-Section\">\r\n        <AddTask onAdd={addTask} courseList={courseList} />\r\n        {tasks.length > 0 ? (\r\n          <Tasks\r\n            tasks={tasks}\r\n            taskToEdit={taskToEdit}\r\n            setTaskToEdit={setTaskToEdit}\r\n            onEdit={editTask}\r\n            onDelete={deleteTask}\r\n            courseList={courseList}\r\n          />\r\n        ) : (\r\n          \"No tasks to show\"\r\n        )}\r\n\r\n        {/* TODO: Add task list */}\r\n      </section>\r\n\r\n      <section id=\"Course-Section\">\r\n        <CourseHeader\r\n          onAdd={() => setShowAddCourse(!showAddCourse)}\r\n          showAdd={showAddCourse}\r\n        />\r\n        {showAddCourse && (\r\n          <CoursePopup\r\n            content={<AddCourse onAdd={addCourse} />}\r\n            handleClose={() => setShowAddCourse(!showAddCourse)}\r\n          />\r\n        )}\r\n        <CourseList courseList={courseList} onDelete={deleteCourse} />\r\n      </section>\r\n\r\n      <footer></footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}